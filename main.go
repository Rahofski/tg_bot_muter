package main

import (
	"fmt"
	"log"
	"math/rand"
	"os"
	"path/filepath"
	"time"

	"gopkg.in/telebot.v3"
)

func main() {
	// –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
	token := os.Getenv("TOKEN")
	
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
	bot, err := telebot.NewBot(pref)
	if err != nil {
		log.Fatal(err)
	}

	commands := []telebot.Command{
		{Text: "help", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"},
		{Text: "kaban", Description: "–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 1 —á–∞—Å"},
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	err = bot.SetCommands(commands)
	if err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:", err)
	}

	var mutedUsers = make(map[int64]time.Time) // –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

	bot.Handle("/help", func(c telebot.Context) error {
		user := c.Sender()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if muteTime, ok := mutedUsers[user.ID]; ok {
			if time.Now().Before(muteTime) {
				// –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω
				err := c.Delete()
				if err != nil {
					return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: " + err.Error())
				}
				return nil
			}
			delete(mutedUsers, user.ID) // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –º—É—Ç –∏—Å—Ç–µ–∫
		}

		return c.Send("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –æ–±–ª–∞–¥–∞–µ—Ç –≤—Å–µ–≥–æ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π - –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç /kaban –∏ —É–∑–Ω–∞–π, –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç:)")
	})

	bot.Handle("/kaban", func(c telebot.Context) error {
		user := c.Sender()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if muteTime, ok := mutedUsers[user.ID]; ok {
			if time.Now().Before(muteTime) {
				// –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω
				err := c.Delete()
				if err != nil {
					return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: " + err.Error())
				}
				return nil
			}
			delete(mutedUsers, user.ID) // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –º—É—Ç –∏—Å—Ç–µ–∫
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
		if c.Chat().Type != telebot.ChatGroup && c.Chat().Type != telebot.ChatSuperGroup {
			return c.Send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
		}

		// –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º—É—Ç–∞ (—á–µ—Ä–µ–∑ 1 —á–∞—Å)
		mutedUsers[user.ID] = time.Now().Add(1 * time.Hour)

		photoPath, photoName, err := getRandomPhoto("hogs")
		if err != nil {
			return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ: " + err.Error())
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
		photo := &telebot.Photo{File: telebot.FromDisk(photoPath)}
		err = c.Send(photo)
		if err != nil {
			return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: " + err.Error())
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
		if photoName == "19" {
			return c.Send("–í—ã - –ª—É–∑–µ—Ä! üò≠")
		} else if photoName == "20" {
			return c.Send("–î–∂–µ–∫–ø–æ—Ç! üéâ")
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º—É—Ç–µ
		return c.Send(user.FirstName + " —Ç–µ–ø–µ—Ä—å –≤ –º—É—Ç–µ –Ω–∞ 1 —á–∞—Å! üö´")
	})

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	bot.Handle(telebot.OnText, func(c telebot.Context) error {
		user := c.Sender()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if muteTime, ok := mutedUsers[user.ID]; ok {
			if time.Now().After(muteTime) {
				delete(mutedUsers, user.ID) // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –º—É—Ç –∏—Å—Ç–µ–∫
				return nil
			}

			// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/"), —É–¥–∞–ª—è–µ–º –µ–≥–æ
			if c.Message().Text[0] == '/' {
				err := c.Delete()
				if err != nil {
					return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: " + err.Error())
				}
			}

			err := c.Delete()
			if err != nil {
				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: " + err.Error())
			}
		}

		return nil
	})

	bot.Handle(telebot.OnSticker, func(c telebot.Context) error {
		user := c.Sender()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if muteTime, ok := mutedUsers[user.ID]; ok {
			// –ï—Å–ª–∏ –≤—Ä–µ–º—è –º—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
			if time.Now().After(muteTime) {
				delete(mutedUsers, user.ID)
				return nil
			}

			// –£–¥–∞–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
			err := c.Delete()
			if err != nil {
				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä: " + err.Error())
			}
		}

		return nil
	})

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	bot.Handle(telebot.OnVoice, func(c telebot.Context) error {
		user := c.Sender()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if muteTime, ok := mutedUsers[user.ID]; ok {
			// –ï—Å–ª–∏ –≤—Ä–µ–º—è –º—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
			if time.Now().After(muteTime) {
				delete(mutedUsers, user.ID)
				return nil
			}

			// –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			err := c.Delete()
			if err != nil {
				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + err.Error())
			}
		}

		return nil
	})
	bot.Handle(telebot.OnMedia, func(c telebot.Context) error {
		user := c.Sender()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if muteTime, ok := mutedUsers[user.ID]; ok {
			// –ï—Å–ª–∏ –≤—Ä–µ–º—è –º—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
			if time.Now().After(muteTime) {
				delete(mutedUsers, user.ID)
				return nil
			}

			// –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞
			err := c.Delete()
			if err != nil {
				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞: " + err.Error())
			}
		}

		return nil
	})

	bot.Handle(telebot.OnVideo, func(c telebot.Context) error {
		user := c.Sender()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if muteTime, ok := mutedUsers[user.ID]; ok {
			// –ï—Å–ª–∏ –≤—Ä–µ–º—è –º—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
			if time.Now().After(muteTime) {
				delete(mutedUsers, user.ID)
				return nil
			}

			// –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞
			err := c.Delete()
			if err != nil {
				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞: " + err.Error())
			}
		}

		return nil
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	bot.Start()
}


func getRandomPhoto(dir string) (string, string, error) {
	// –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
	files, err := os.ReadDir(dir)
	if err != nil {
		return "", "", err
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã
	var photoFiles []os.DirEntry
	for _, file := range files {
		if !file.IsDir() {
			photoFiles = append(photoFiles, file)
		}
	}

	if len(photoFiles) == 0 {
		return "", "", fmt.Errorf("–≤ –ø–∞–ø–∫–µ %s –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", dir)
	}

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ
	rand.Seed(time.Now().UnixNano())
	randomFile := photoFiles[rand.Intn(len(photoFiles))]

	// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞
	photoPath := filepath.Join(dir, randomFile.Name())
	photoName := filepath.Base(randomFile.Name())
	photoName = photoName[:len(photoName)-len(filepath.Ext(photoName))] // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ

	return photoPath, photoName, nil
}
